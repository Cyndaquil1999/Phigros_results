
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Music
 * 
 */
export type Music = $Result.DefaultSelection<Prisma.$MusicPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Difficulty
 * 
 */
export type Difficulty = $Result.DefaultSelection<Prisma.$DifficultyPayload>
/**
 * Model UserMusicScore
 * 
 */
export type UserMusicScore = $Result.DefaultSelection<Prisma.$UserMusicScorePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Music
 * const music = await prisma.music.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Music
   * const music = await prisma.music.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.music`: Exposes CRUD operations for the **Music** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Music
    * const music = await prisma.music.findMany()
    * ```
    */
  get music(): Prisma.MusicDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.difficulty`: Exposes CRUD operations for the **Difficulty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Difficulties
    * const difficulties = await prisma.difficulty.findMany()
    * ```
    */
  get difficulty(): Prisma.DifficultyDelegate<ExtArgs>;

  /**
   * `prisma.userMusicScore`: Exposes CRUD operations for the **UserMusicScore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserMusicScores
    * const userMusicScores = await prisma.userMusicScore.findMany()
    * ```
    */
  get userMusicScore(): Prisma.UserMusicScoreDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Music: 'Music',
    User: 'User',
    Difficulty: 'Difficulty',
    UserMusicScore: 'UserMusicScore'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'music' | 'user' | 'difficulty' | 'userMusicScore'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Music: {
        payload: Prisma.$MusicPayload<ExtArgs>
        fields: Prisma.MusicFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MusicFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusicPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MusicFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusicPayload>
          }
          findFirst: {
            args: Prisma.MusicFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusicPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MusicFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusicPayload>
          }
          findMany: {
            args: Prisma.MusicFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusicPayload>[]
          }
          create: {
            args: Prisma.MusicCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusicPayload>
          }
          createMany: {
            args: Prisma.MusicCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MusicCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusicPayload>[]
          }
          delete: {
            args: Prisma.MusicDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusicPayload>
          }
          update: {
            args: Prisma.MusicUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusicPayload>
          }
          deleteMany: {
            args: Prisma.MusicDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MusicUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MusicUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MusicPayload>
          }
          aggregate: {
            args: Prisma.MusicAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMusic>
          }
          groupBy: {
            args: Prisma.MusicGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MusicGroupByOutputType>[]
          }
          count: {
            args: Prisma.MusicCountArgs<ExtArgs>,
            result: $Utils.Optional<MusicCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Difficulty: {
        payload: Prisma.$DifficultyPayload<ExtArgs>
        fields: Prisma.DifficultyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DifficultyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DifficultyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>
          }
          findFirst: {
            args: Prisma.DifficultyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DifficultyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>
          }
          findMany: {
            args: Prisma.DifficultyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>[]
          }
          create: {
            args: Prisma.DifficultyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>
          }
          createMany: {
            args: Prisma.DifficultyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DifficultyCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>[]
          }
          delete: {
            args: Prisma.DifficultyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>
          }
          update: {
            args: Prisma.DifficultyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>
          }
          deleteMany: {
            args: Prisma.DifficultyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DifficultyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DifficultyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DifficultyPayload>
          }
          aggregate: {
            args: Prisma.DifficultyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDifficulty>
          }
          groupBy: {
            args: Prisma.DifficultyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DifficultyGroupByOutputType>[]
          }
          count: {
            args: Prisma.DifficultyCountArgs<ExtArgs>,
            result: $Utils.Optional<DifficultyCountAggregateOutputType> | number
          }
        }
      }
      UserMusicScore: {
        payload: Prisma.$UserMusicScorePayload<ExtArgs>
        fields: Prisma.UserMusicScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserMusicScoreFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMusicScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserMusicScoreFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMusicScorePayload>
          }
          findFirst: {
            args: Prisma.UserMusicScoreFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMusicScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserMusicScoreFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMusicScorePayload>
          }
          findMany: {
            args: Prisma.UserMusicScoreFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMusicScorePayload>[]
          }
          create: {
            args: Prisma.UserMusicScoreCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMusicScorePayload>
          }
          createMany: {
            args: Prisma.UserMusicScoreCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserMusicScoreCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMusicScorePayload>[]
          }
          delete: {
            args: Prisma.UserMusicScoreDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMusicScorePayload>
          }
          update: {
            args: Prisma.UserMusicScoreUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMusicScorePayload>
          }
          deleteMany: {
            args: Prisma.UserMusicScoreDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserMusicScoreUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserMusicScoreUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserMusicScorePayload>
          }
          aggregate: {
            args: Prisma.UserMusicScoreAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserMusicScore>
          }
          groupBy: {
            args: Prisma.UserMusicScoreGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserMusicScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserMusicScoreCountArgs<ExtArgs>,
            result: $Utils.Optional<UserMusicScoreCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MusicCountOutputType
   */

  export type MusicCountOutputType = {
    userScores: number
  }

  export type MusicCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userScores?: boolean | MusicCountOutputTypeCountUserScoresArgs
  }

  // Custom InputTypes
  /**
   * MusicCountOutputType without action
   */
  export type MusicCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MusicCountOutputType
     */
    select?: MusicCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MusicCountOutputType without action
   */
  export type MusicCountOutputTypeCountUserScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMusicScoreWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    scores: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scores?: boolean | UserCountOutputTypeCountScoresArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMusicScoreWhereInput
  }


  /**
   * Count Type DifficultyCountOutputType
   */

  export type DifficultyCountOutputType = {
    musics: number
  }

  export type DifficultyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    musics?: boolean | DifficultyCountOutputTypeCountMusicsArgs
  }

  // Custom InputTypes
  /**
   * DifficultyCountOutputType without action
   */
  export type DifficultyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DifficultyCountOutputType
     */
    select?: DifficultyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DifficultyCountOutputType without action
   */
  export type DifficultyCountOutputTypeCountMusicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MusicWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Music
   */

  export type AggregateMusic = {
    _count: MusicCountAggregateOutputType | null
    _avg: MusicAvgAggregateOutputType | null
    _sum: MusicSumAggregateOutputType | null
    _min: MusicMinAggregateOutputType | null
    _max: MusicMaxAggregateOutputType | null
  }

  export type MusicAvgAggregateOutputType = {
    id: number | null
    difficultyId: number | null
    scoreConstant: number | null
  }

  export type MusicSumAggregateOutputType = {
    id: number | null
    difficultyId: number | null
    scoreConstant: number | null
  }

  export type MusicMinAggregateOutputType = {
    id: number | null
    title: string | null
    composer: string | null
    difficultyId: number | null
    scoreConstant: number | null
  }

  export type MusicMaxAggregateOutputType = {
    id: number | null
    title: string | null
    composer: string | null
    difficultyId: number | null
    scoreConstant: number | null
  }

  export type MusicCountAggregateOutputType = {
    id: number
    title: number
    composer: number
    difficultyId: number
    scoreConstant: number
    _all: number
  }


  export type MusicAvgAggregateInputType = {
    id?: true
    difficultyId?: true
    scoreConstant?: true
  }

  export type MusicSumAggregateInputType = {
    id?: true
    difficultyId?: true
    scoreConstant?: true
  }

  export type MusicMinAggregateInputType = {
    id?: true
    title?: true
    composer?: true
    difficultyId?: true
    scoreConstant?: true
  }

  export type MusicMaxAggregateInputType = {
    id?: true
    title?: true
    composer?: true
    difficultyId?: true
    scoreConstant?: true
  }

  export type MusicCountAggregateInputType = {
    id?: true
    title?: true
    composer?: true
    difficultyId?: true
    scoreConstant?: true
    _all?: true
  }

  export type MusicAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Music to aggregate.
     */
    where?: MusicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Music to fetch.
     */
    orderBy?: MusicOrderByWithRelationInput | MusicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MusicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Music from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Music.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Music
    **/
    _count?: true | MusicCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MusicAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MusicSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MusicMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MusicMaxAggregateInputType
  }

  export type GetMusicAggregateType<T extends MusicAggregateArgs> = {
        [P in keyof T & keyof AggregateMusic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMusic[P]>
      : GetScalarType<T[P], AggregateMusic[P]>
  }




  export type MusicGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MusicWhereInput
    orderBy?: MusicOrderByWithAggregationInput | MusicOrderByWithAggregationInput[]
    by: MusicScalarFieldEnum[] | MusicScalarFieldEnum
    having?: MusicScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MusicCountAggregateInputType | true
    _avg?: MusicAvgAggregateInputType
    _sum?: MusicSumAggregateInputType
    _min?: MusicMinAggregateInputType
    _max?: MusicMaxAggregateInputType
  }

  export type MusicGroupByOutputType = {
    id: number
    title: string
    composer: string
    difficultyId: number
    scoreConstant: number
    _count: MusicCountAggregateOutputType | null
    _avg: MusicAvgAggregateOutputType | null
    _sum: MusicSumAggregateOutputType | null
    _min: MusicMinAggregateOutputType | null
    _max: MusicMaxAggregateOutputType | null
  }

  type GetMusicGroupByPayload<T extends MusicGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MusicGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MusicGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MusicGroupByOutputType[P]>
            : GetScalarType<T[P], MusicGroupByOutputType[P]>
        }
      >
    >


  export type MusicSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    composer?: boolean
    difficultyId?: boolean
    scoreConstant?: boolean
    userScores?: boolean | Music$userScoresArgs<ExtArgs>
    difficulty?: boolean | DifficultyDefaultArgs<ExtArgs>
    _count?: boolean | MusicCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["music"]>

  export type MusicSelectScalar = {
    id?: boolean
    title?: boolean
    composer?: boolean
    difficultyId?: boolean
    scoreConstant?: boolean
  }


  export type MusicInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userScores?: boolean | Music$userScoresArgs<ExtArgs>
    difficulty?: boolean | DifficultyDefaultArgs<ExtArgs>
    _count?: boolean | MusicCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MusicPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Music"
    objects: {
      userScores: Prisma.$UserMusicScorePayload<ExtArgs>[]
      difficulty: Prisma.$DifficultyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      composer: string
      difficultyId: number
      scoreConstant: number
    }, ExtArgs["result"]["music"]>
    composites: {}
  }


  type MusicGetPayload<S extends boolean | null | undefined | MusicDefaultArgs> = $Result.GetResult<Prisma.$MusicPayload, S>

  type MusicCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MusicFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MusicCountAggregateInputType | true
    }

  export interface MusicDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Music'], meta: { name: 'Music' } }
    /**
     * Find zero or one Music that matches the filter.
     * @param {MusicFindUniqueArgs} args - Arguments to find a Music
     * @example
     * // Get one Music
     * const music = await prisma.music.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MusicFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MusicFindUniqueArgs<ExtArgs>>
    ): Prisma__MusicClient<$Result.GetResult<Prisma.$MusicPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Music that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MusicFindUniqueOrThrowArgs} args - Arguments to find a Music
     * @example
     * // Get one Music
     * const music = await prisma.music.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MusicFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MusicFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MusicClient<$Result.GetResult<Prisma.$MusicPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Music that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicFindFirstArgs} args - Arguments to find a Music
     * @example
     * // Get one Music
     * const music = await prisma.music.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MusicFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MusicFindFirstArgs<ExtArgs>>
    ): Prisma__MusicClient<$Result.GetResult<Prisma.$MusicPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Music that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicFindFirstOrThrowArgs} args - Arguments to find a Music
     * @example
     * // Get one Music
     * const music = await prisma.music.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MusicFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MusicFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MusicClient<$Result.GetResult<Prisma.$MusicPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Music that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Music
     * const music = await prisma.music.findMany()
     * 
     * // Get first 10 Music
     * const music = await prisma.music.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const musicWithIdOnly = await prisma.music.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MusicFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MusicFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusicPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Music.
     * @param {MusicCreateArgs} args - Arguments to create a Music.
     * @example
     * // Create one Music
     * const Music = await prisma.music.create({
     *   data: {
     *     // ... data to create a Music
     *   }
     * })
     * 
    **/
    create<T extends MusicCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MusicCreateArgs<ExtArgs>>
    ): Prisma__MusicClient<$Result.GetResult<Prisma.$MusicPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Music.
     * @param {MusicCreateManyArgs} args - Arguments to create many Music.
     * @example
     * // Create many Music
     * const music = await prisma.music.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends MusicCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MusicCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Music and returns the data saved in the database.
     * @param {MusicCreateManyAndReturnArgs} args - Arguments to create many Music.
     * @example
     * // Create many Music
     * const music = await prisma.music.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Music and only return the `id`
     * const musicWithIdOnly = await prisma.music.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends MusicCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, MusicCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusicPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Music.
     * @param {MusicDeleteArgs} args - Arguments to delete one Music.
     * @example
     * // Delete one Music
     * const Music = await prisma.music.delete({
     *   where: {
     *     // ... filter to delete one Music
     *   }
     * })
     * 
    **/
    delete<T extends MusicDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MusicDeleteArgs<ExtArgs>>
    ): Prisma__MusicClient<$Result.GetResult<Prisma.$MusicPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Music.
     * @param {MusicUpdateArgs} args - Arguments to update one Music.
     * @example
     * // Update one Music
     * const music = await prisma.music.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MusicUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MusicUpdateArgs<ExtArgs>>
    ): Prisma__MusicClient<$Result.GetResult<Prisma.$MusicPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Music.
     * @param {MusicDeleteManyArgs} args - Arguments to filter Music to delete.
     * @example
     * // Delete a few Music
     * const { count } = await prisma.music.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MusicDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MusicDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Music.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Music
     * const music = await prisma.music.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MusicUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MusicUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Music.
     * @param {MusicUpsertArgs} args - Arguments to update or create a Music.
     * @example
     * // Update or create a Music
     * const music = await prisma.music.upsert({
     *   create: {
     *     // ... data to create a Music
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Music we want to update
     *   }
     * })
    **/
    upsert<T extends MusicUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MusicUpsertArgs<ExtArgs>>
    ): Prisma__MusicClient<$Result.GetResult<Prisma.$MusicPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Music.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicCountArgs} args - Arguments to filter Music to count.
     * @example
     * // Count the number of Music
     * const count = await prisma.music.count({
     *   where: {
     *     // ... the filter for the Music we want to count
     *   }
     * })
    **/
    count<T extends MusicCountArgs>(
      args?: Subset<T, MusicCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MusicCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Music.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MusicAggregateArgs>(args: Subset<T, MusicAggregateArgs>): Prisma.PrismaPromise<GetMusicAggregateType<T>>

    /**
     * Group by Music.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MusicGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MusicGroupByArgs['orderBy'] }
        : { orderBy?: MusicGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MusicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMusicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Music model
   */
  readonly fields: MusicFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Music.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MusicClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    userScores<T extends Music$userScoresArgs<ExtArgs> = {}>(args?: Subset<T, Music$userScoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMusicScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    difficulty<T extends DifficultyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DifficultyDefaultArgs<ExtArgs>>): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Music model
   */ 
  interface MusicFieldRefs {
    readonly id: FieldRef<"Music", 'Int'>
    readonly title: FieldRef<"Music", 'String'>
    readonly composer: FieldRef<"Music", 'String'>
    readonly difficultyId: FieldRef<"Music", 'Int'>
    readonly scoreConstant: FieldRef<"Music", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Music findUnique
   */
  export type MusicFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Music
     */
    select?: MusicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicInclude<ExtArgs> | null
    /**
     * Filter, which Music to fetch.
     */
    where: MusicWhereUniqueInput
  }

  /**
   * Music findUniqueOrThrow
   */
  export type MusicFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Music
     */
    select?: MusicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicInclude<ExtArgs> | null
    /**
     * Filter, which Music to fetch.
     */
    where: MusicWhereUniqueInput
  }

  /**
   * Music findFirst
   */
  export type MusicFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Music
     */
    select?: MusicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicInclude<ExtArgs> | null
    /**
     * Filter, which Music to fetch.
     */
    where?: MusicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Music to fetch.
     */
    orderBy?: MusicOrderByWithRelationInput | MusicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Music.
     */
    cursor?: MusicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Music from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Music.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Music.
     */
    distinct?: MusicScalarFieldEnum | MusicScalarFieldEnum[]
  }

  /**
   * Music findFirstOrThrow
   */
  export type MusicFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Music
     */
    select?: MusicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicInclude<ExtArgs> | null
    /**
     * Filter, which Music to fetch.
     */
    where?: MusicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Music to fetch.
     */
    orderBy?: MusicOrderByWithRelationInput | MusicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Music.
     */
    cursor?: MusicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Music from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Music.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Music.
     */
    distinct?: MusicScalarFieldEnum | MusicScalarFieldEnum[]
  }

  /**
   * Music findMany
   */
  export type MusicFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Music
     */
    select?: MusicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicInclude<ExtArgs> | null
    /**
     * Filter, which Music to fetch.
     */
    where?: MusicWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Music to fetch.
     */
    orderBy?: MusicOrderByWithRelationInput | MusicOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Music.
     */
    cursor?: MusicWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Music from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Music.
     */
    skip?: number
    distinct?: MusicScalarFieldEnum | MusicScalarFieldEnum[]
  }

  /**
   * Music create
   */
  export type MusicCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Music
     */
    select?: MusicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicInclude<ExtArgs> | null
    /**
     * The data needed to create a Music.
     */
    data: XOR<MusicCreateInput, MusicUncheckedCreateInput>
  }

  /**
   * Music createMany
   */
  export type MusicCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Music.
     */
    data: MusicCreateManyInput | MusicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Music createManyAndReturn
   */
  export type MusicCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Music
     */
    select?: MusicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicInclude<ExtArgs> | null
    /**
     * The data used to create many Music.
     */
    data: MusicCreateManyInput | MusicCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Music update
   */
  export type MusicUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Music
     */
    select?: MusicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicInclude<ExtArgs> | null
    /**
     * The data needed to update a Music.
     */
    data: XOR<MusicUpdateInput, MusicUncheckedUpdateInput>
    /**
     * Choose, which Music to update.
     */
    where: MusicWhereUniqueInput
  }

  /**
   * Music updateMany
   */
  export type MusicUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Music.
     */
    data: XOR<MusicUpdateManyMutationInput, MusicUncheckedUpdateManyInput>
    /**
     * Filter which Music to update
     */
    where?: MusicWhereInput
  }

  /**
   * Music upsert
   */
  export type MusicUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Music
     */
    select?: MusicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicInclude<ExtArgs> | null
    /**
     * The filter to search for the Music to update in case it exists.
     */
    where: MusicWhereUniqueInput
    /**
     * In case the Music found by the `where` argument doesn't exist, create a new Music with this data.
     */
    create: XOR<MusicCreateInput, MusicUncheckedCreateInput>
    /**
     * In case the Music was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MusicUpdateInput, MusicUncheckedUpdateInput>
  }

  /**
   * Music delete
   */
  export type MusicDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Music
     */
    select?: MusicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicInclude<ExtArgs> | null
    /**
     * Filter which Music to delete.
     */
    where: MusicWhereUniqueInput
  }

  /**
   * Music deleteMany
   */
  export type MusicDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Music to delete
     */
    where?: MusicWhereInput
  }

  /**
   * Music.userScores
   */
  export type Music$userScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
    where?: UserMusicScoreWhereInput
    orderBy?: UserMusicScoreOrderByWithRelationInput | UserMusicScoreOrderByWithRelationInput[]
    cursor?: UserMusicScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMusicScoreScalarFieldEnum | UserMusicScoreScalarFieldEnum[]
  }

  /**
   * Music without action
   */
  export type MusicDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Music
     */
    select?: MusicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    loginId: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    loginId: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    loginId: number
    password: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    loginId?: true
    password?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    loginId?: true
    password?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    loginId?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    loginId: string
    password: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    loginId?: boolean
    password?: boolean
    createdAt?: boolean
    scores?: boolean | User$scoresArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    loginId?: boolean
    password?: boolean
    createdAt?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scores?: boolean | User$scoresArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      scores: Prisma.$UserMusicScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      loginId: string
      password: string
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    scores<T extends User$scoresArgs<ExtArgs> = {}>(args?: Subset<T, User$scoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMusicScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly loginId: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.scores
   */
  export type User$scoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
    where?: UserMusicScoreWhereInput
    orderBy?: UserMusicScoreOrderByWithRelationInput | UserMusicScoreOrderByWithRelationInput[]
    cursor?: UserMusicScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMusicScoreScalarFieldEnum | UserMusicScoreScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Difficulty
   */

  export type AggregateDifficulty = {
    _count: DifficultyCountAggregateOutputType | null
    _avg: DifficultyAvgAggregateOutputType | null
    _sum: DifficultySumAggregateOutputType | null
    _min: DifficultyMinAggregateOutputType | null
    _max: DifficultyMaxAggregateOutputType | null
  }

  export type DifficultyAvgAggregateOutputType = {
    id: number | null
  }

  export type DifficultySumAggregateOutputType = {
    id: number | null
  }

  export type DifficultyMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type DifficultyMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type DifficultyCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type DifficultyAvgAggregateInputType = {
    id?: true
  }

  export type DifficultySumAggregateInputType = {
    id?: true
  }

  export type DifficultyMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type DifficultyMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type DifficultyCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type DifficultyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Difficulty to aggregate.
     */
    where?: DifficultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Difficulties to fetch.
     */
    orderBy?: DifficultyOrderByWithRelationInput | DifficultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DifficultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Difficulties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Difficulties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Difficulties
    **/
    _count?: true | DifficultyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DifficultyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DifficultySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DifficultyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DifficultyMaxAggregateInputType
  }

  export type GetDifficultyAggregateType<T extends DifficultyAggregateArgs> = {
        [P in keyof T & keyof AggregateDifficulty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDifficulty[P]>
      : GetScalarType<T[P], AggregateDifficulty[P]>
  }




  export type DifficultyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DifficultyWhereInput
    orderBy?: DifficultyOrderByWithAggregationInput | DifficultyOrderByWithAggregationInput[]
    by: DifficultyScalarFieldEnum[] | DifficultyScalarFieldEnum
    having?: DifficultyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DifficultyCountAggregateInputType | true
    _avg?: DifficultyAvgAggregateInputType
    _sum?: DifficultySumAggregateInputType
    _min?: DifficultyMinAggregateInputType
    _max?: DifficultyMaxAggregateInputType
  }

  export type DifficultyGroupByOutputType = {
    id: number
    name: string
    _count: DifficultyCountAggregateOutputType | null
    _avg: DifficultyAvgAggregateOutputType | null
    _sum: DifficultySumAggregateOutputType | null
    _min: DifficultyMinAggregateOutputType | null
    _max: DifficultyMaxAggregateOutputType | null
  }

  type GetDifficultyGroupByPayload<T extends DifficultyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DifficultyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DifficultyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DifficultyGroupByOutputType[P]>
            : GetScalarType<T[P], DifficultyGroupByOutputType[P]>
        }
      >
    >


  export type DifficultySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    musics?: boolean | Difficulty$musicsArgs<ExtArgs>
    _count?: boolean | DifficultyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["difficulty"]>

  export type DifficultySelectScalar = {
    id?: boolean
    name?: boolean
  }


  export type DifficultyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    musics?: boolean | Difficulty$musicsArgs<ExtArgs>
    _count?: boolean | DifficultyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DifficultyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Difficulty"
    objects: {
      musics: Prisma.$MusicPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["difficulty"]>
    composites: {}
  }


  type DifficultyGetPayload<S extends boolean | null | undefined | DifficultyDefaultArgs> = $Result.GetResult<Prisma.$DifficultyPayload, S>

  type DifficultyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DifficultyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DifficultyCountAggregateInputType | true
    }

  export interface DifficultyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Difficulty'], meta: { name: 'Difficulty' } }
    /**
     * Find zero or one Difficulty that matches the filter.
     * @param {DifficultyFindUniqueArgs} args - Arguments to find a Difficulty
     * @example
     * // Get one Difficulty
     * const difficulty = await prisma.difficulty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DifficultyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DifficultyFindUniqueArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Difficulty that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DifficultyFindUniqueOrThrowArgs} args - Arguments to find a Difficulty
     * @example
     * // Get one Difficulty
     * const difficulty = await prisma.difficulty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DifficultyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Difficulty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyFindFirstArgs} args - Arguments to find a Difficulty
     * @example
     * // Get one Difficulty
     * const difficulty = await prisma.difficulty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DifficultyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyFindFirstArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Difficulty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyFindFirstOrThrowArgs} args - Arguments to find a Difficulty
     * @example
     * // Get one Difficulty
     * const difficulty = await prisma.difficulty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DifficultyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Difficulties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Difficulties
     * const difficulties = await prisma.difficulty.findMany()
     * 
     * // Get first 10 Difficulties
     * const difficulties = await prisma.difficulty.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const difficultyWithIdOnly = await prisma.difficulty.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DifficultyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Difficulty.
     * @param {DifficultyCreateArgs} args - Arguments to create a Difficulty.
     * @example
     * // Create one Difficulty
     * const Difficulty = await prisma.difficulty.create({
     *   data: {
     *     // ... data to create a Difficulty
     *   }
     * })
     * 
    **/
    create<T extends DifficultyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DifficultyCreateArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Difficulties.
     * @param {DifficultyCreateManyArgs} args - Arguments to create many Difficulties.
     * @example
     * // Create many Difficulties
     * const difficulty = await prisma.difficulty.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends DifficultyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Difficulties and returns the data saved in the database.
     * @param {DifficultyCreateManyAndReturnArgs} args - Arguments to create many Difficulties.
     * @example
     * // Create many Difficulties
     * const difficulty = await prisma.difficulty.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Difficulties and only return the `id`
     * const difficultyWithIdOnly = await prisma.difficulty.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends DifficultyCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Difficulty.
     * @param {DifficultyDeleteArgs} args - Arguments to delete one Difficulty.
     * @example
     * // Delete one Difficulty
     * const Difficulty = await prisma.difficulty.delete({
     *   where: {
     *     // ... filter to delete one Difficulty
     *   }
     * })
     * 
    **/
    delete<T extends DifficultyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DifficultyDeleteArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Difficulty.
     * @param {DifficultyUpdateArgs} args - Arguments to update one Difficulty.
     * @example
     * // Update one Difficulty
     * const difficulty = await prisma.difficulty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DifficultyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DifficultyUpdateArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Difficulties.
     * @param {DifficultyDeleteManyArgs} args - Arguments to filter Difficulties to delete.
     * @example
     * // Delete a few Difficulties
     * const { count } = await prisma.difficulty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DifficultyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DifficultyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Difficulties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Difficulties
     * const difficulty = await prisma.difficulty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DifficultyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DifficultyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Difficulty.
     * @param {DifficultyUpsertArgs} args - Arguments to update or create a Difficulty.
     * @example
     * // Update or create a Difficulty
     * const difficulty = await prisma.difficulty.upsert({
     *   create: {
     *     // ... data to create a Difficulty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Difficulty we want to update
     *   }
     * })
    **/
    upsert<T extends DifficultyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DifficultyUpsertArgs<ExtArgs>>
    ): Prisma__DifficultyClient<$Result.GetResult<Prisma.$DifficultyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Difficulties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyCountArgs} args - Arguments to filter Difficulties to count.
     * @example
     * // Count the number of Difficulties
     * const count = await prisma.difficulty.count({
     *   where: {
     *     // ... the filter for the Difficulties we want to count
     *   }
     * })
    **/
    count<T extends DifficultyCountArgs>(
      args?: Subset<T, DifficultyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DifficultyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Difficulty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DifficultyAggregateArgs>(args: Subset<T, DifficultyAggregateArgs>): Prisma.PrismaPromise<GetDifficultyAggregateType<T>>

    /**
     * Group by Difficulty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DifficultyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DifficultyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DifficultyGroupByArgs['orderBy'] }
        : { orderBy?: DifficultyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DifficultyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDifficultyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Difficulty model
   */
  readonly fields: DifficultyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Difficulty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DifficultyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    musics<T extends Difficulty$musicsArgs<ExtArgs> = {}>(args?: Subset<T, Difficulty$musicsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusicPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Difficulty model
   */ 
  interface DifficultyFieldRefs {
    readonly id: FieldRef<"Difficulty", 'Int'>
    readonly name: FieldRef<"Difficulty", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Difficulty findUnique
   */
  export type DifficultyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * Filter, which Difficulty to fetch.
     */
    where: DifficultyWhereUniqueInput
  }

  /**
   * Difficulty findUniqueOrThrow
   */
  export type DifficultyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * Filter, which Difficulty to fetch.
     */
    where: DifficultyWhereUniqueInput
  }

  /**
   * Difficulty findFirst
   */
  export type DifficultyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * Filter, which Difficulty to fetch.
     */
    where?: DifficultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Difficulties to fetch.
     */
    orderBy?: DifficultyOrderByWithRelationInput | DifficultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Difficulties.
     */
    cursor?: DifficultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Difficulties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Difficulties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Difficulties.
     */
    distinct?: DifficultyScalarFieldEnum | DifficultyScalarFieldEnum[]
  }

  /**
   * Difficulty findFirstOrThrow
   */
  export type DifficultyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * Filter, which Difficulty to fetch.
     */
    where?: DifficultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Difficulties to fetch.
     */
    orderBy?: DifficultyOrderByWithRelationInput | DifficultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Difficulties.
     */
    cursor?: DifficultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Difficulties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Difficulties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Difficulties.
     */
    distinct?: DifficultyScalarFieldEnum | DifficultyScalarFieldEnum[]
  }

  /**
   * Difficulty findMany
   */
  export type DifficultyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * Filter, which Difficulties to fetch.
     */
    where?: DifficultyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Difficulties to fetch.
     */
    orderBy?: DifficultyOrderByWithRelationInput | DifficultyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Difficulties.
     */
    cursor?: DifficultyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Difficulties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Difficulties.
     */
    skip?: number
    distinct?: DifficultyScalarFieldEnum | DifficultyScalarFieldEnum[]
  }

  /**
   * Difficulty create
   */
  export type DifficultyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * The data needed to create a Difficulty.
     */
    data: XOR<DifficultyCreateInput, DifficultyUncheckedCreateInput>
  }

  /**
   * Difficulty createMany
   */
  export type DifficultyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Difficulties.
     */
    data: DifficultyCreateManyInput | DifficultyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Difficulty createManyAndReturn
   */
  export type DifficultyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * The data used to create many Difficulties.
     */
    data: DifficultyCreateManyInput | DifficultyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Difficulty update
   */
  export type DifficultyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * The data needed to update a Difficulty.
     */
    data: XOR<DifficultyUpdateInput, DifficultyUncheckedUpdateInput>
    /**
     * Choose, which Difficulty to update.
     */
    where: DifficultyWhereUniqueInput
  }

  /**
   * Difficulty updateMany
   */
  export type DifficultyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Difficulties.
     */
    data: XOR<DifficultyUpdateManyMutationInput, DifficultyUncheckedUpdateManyInput>
    /**
     * Filter which Difficulties to update
     */
    where?: DifficultyWhereInput
  }

  /**
   * Difficulty upsert
   */
  export type DifficultyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * The filter to search for the Difficulty to update in case it exists.
     */
    where: DifficultyWhereUniqueInput
    /**
     * In case the Difficulty found by the `where` argument doesn't exist, create a new Difficulty with this data.
     */
    create: XOR<DifficultyCreateInput, DifficultyUncheckedCreateInput>
    /**
     * In case the Difficulty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DifficultyUpdateInput, DifficultyUncheckedUpdateInput>
  }

  /**
   * Difficulty delete
   */
  export type DifficultyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
    /**
     * Filter which Difficulty to delete.
     */
    where: DifficultyWhereUniqueInput
  }

  /**
   * Difficulty deleteMany
   */
  export type DifficultyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Difficulties to delete
     */
    where?: DifficultyWhereInput
  }

  /**
   * Difficulty.musics
   */
  export type Difficulty$musicsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Music
     */
    select?: MusicSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicInclude<ExtArgs> | null
    where?: MusicWhereInput
    orderBy?: MusicOrderByWithRelationInput | MusicOrderByWithRelationInput[]
    cursor?: MusicWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MusicScalarFieldEnum | MusicScalarFieldEnum[]
  }

  /**
   * Difficulty without action
   */
  export type DifficultyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Difficulty
     */
    select?: DifficultySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DifficultyInclude<ExtArgs> | null
  }


  /**
   * Model UserMusicScore
   */

  export type AggregateUserMusicScore = {
    _count: UserMusicScoreCountAggregateOutputType | null
    _avg: UserMusicScoreAvgAggregateOutputType | null
    _sum: UserMusicScoreSumAggregateOutputType | null
    _min: UserMusicScoreMinAggregateOutputType | null
    _max: UserMusicScoreMaxAggregateOutputType | null
  }

  export type UserMusicScoreAvgAggregateOutputType = {
    id: number | null
    musicId: number | null
    accuracy: number | null
  }

  export type UserMusicScoreSumAggregateOutputType = {
    id: number | null
    musicId: number | null
    accuracy: number | null
  }

  export type UserMusicScoreMinAggregateOutputType = {
    id: number | null
    userId: string | null
    musicId: number | null
    accuracy: number | null
  }

  export type UserMusicScoreMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    musicId: number | null
    accuracy: number | null
  }

  export type UserMusicScoreCountAggregateOutputType = {
    id: number
    userId: number
    musicId: number
    accuracy: number
    _all: number
  }


  export type UserMusicScoreAvgAggregateInputType = {
    id?: true
    musicId?: true
    accuracy?: true
  }

  export type UserMusicScoreSumAggregateInputType = {
    id?: true
    musicId?: true
    accuracy?: true
  }

  export type UserMusicScoreMinAggregateInputType = {
    id?: true
    userId?: true
    musicId?: true
    accuracy?: true
  }

  export type UserMusicScoreMaxAggregateInputType = {
    id?: true
    userId?: true
    musicId?: true
    accuracy?: true
  }

  export type UserMusicScoreCountAggregateInputType = {
    id?: true
    userId?: true
    musicId?: true
    accuracy?: true
    _all?: true
  }

  export type UserMusicScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMusicScore to aggregate.
     */
    where?: UserMusicScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMusicScores to fetch.
     */
    orderBy?: UserMusicScoreOrderByWithRelationInput | UserMusicScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserMusicScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMusicScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMusicScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserMusicScores
    **/
    _count?: true | UserMusicScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserMusicScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserMusicScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMusicScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMusicScoreMaxAggregateInputType
  }

  export type GetUserMusicScoreAggregateType<T extends UserMusicScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateUserMusicScore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserMusicScore[P]>
      : GetScalarType<T[P], AggregateUserMusicScore[P]>
  }




  export type UserMusicScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserMusicScoreWhereInput
    orderBy?: UserMusicScoreOrderByWithAggregationInput | UserMusicScoreOrderByWithAggregationInput[]
    by: UserMusicScoreScalarFieldEnum[] | UserMusicScoreScalarFieldEnum
    having?: UserMusicScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserMusicScoreCountAggregateInputType | true
    _avg?: UserMusicScoreAvgAggregateInputType
    _sum?: UserMusicScoreSumAggregateInputType
    _min?: UserMusicScoreMinAggregateInputType
    _max?: UserMusicScoreMaxAggregateInputType
  }

  export type UserMusicScoreGroupByOutputType = {
    id: number
    userId: string
    musicId: number
    accuracy: number
    _count: UserMusicScoreCountAggregateOutputType | null
    _avg: UserMusicScoreAvgAggregateOutputType | null
    _sum: UserMusicScoreSumAggregateOutputType | null
    _min: UserMusicScoreMinAggregateOutputType | null
    _max: UserMusicScoreMaxAggregateOutputType | null
  }

  type GetUserMusicScoreGroupByPayload<T extends UserMusicScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserMusicScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserMusicScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserMusicScoreGroupByOutputType[P]>
            : GetScalarType<T[P], UserMusicScoreGroupByOutputType[P]>
        }
      >
    >


  export type UserMusicScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    musicId?: boolean
    accuracy?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    music?: boolean | MusicDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userMusicScore"]>

  export type UserMusicScoreSelectScalar = {
    id?: boolean
    userId?: boolean
    musicId?: boolean
    accuracy?: boolean
  }


  export type UserMusicScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    music?: boolean | MusicDefaultArgs<ExtArgs>
  }


  export type $UserMusicScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserMusicScore"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      music: Prisma.$MusicPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      musicId: number
      accuracy: number
    }, ExtArgs["result"]["userMusicScore"]>
    composites: {}
  }


  type UserMusicScoreGetPayload<S extends boolean | null | undefined | UserMusicScoreDefaultArgs> = $Result.GetResult<Prisma.$UserMusicScorePayload, S>

  type UserMusicScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserMusicScoreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserMusicScoreCountAggregateInputType | true
    }

  export interface UserMusicScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserMusicScore'], meta: { name: 'UserMusicScore' } }
    /**
     * Find zero or one UserMusicScore that matches the filter.
     * @param {UserMusicScoreFindUniqueArgs} args - Arguments to find a UserMusicScore
     * @example
     * // Get one UserMusicScore
     * const userMusicScore = await prisma.userMusicScore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserMusicScoreFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserMusicScoreFindUniqueArgs<ExtArgs>>
    ): Prisma__UserMusicScoreClient<$Result.GetResult<Prisma.$UserMusicScorePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserMusicScore that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserMusicScoreFindUniqueOrThrowArgs} args - Arguments to find a UserMusicScore
     * @example
     * // Get one UserMusicScore
     * const userMusicScore = await prisma.userMusicScore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserMusicScoreFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMusicScoreFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserMusicScoreClient<$Result.GetResult<Prisma.$UserMusicScorePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserMusicScore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicScoreFindFirstArgs} args - Arguments to find a UserMusicScore
     * @example
     * // Get one UserMusicScore
     * const userMusicScore = await prisma.userMusicScore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserMusicScoreFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMusicScoreFindFirstArgs<ExtArgs>>
    ): Prisma__UserMusicScoreClient<$Result.GetResult<Prisma.$UserMusicScorePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserMusicScore that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicScoreFindFirstOrThrowArgs} args - Arguments to find a UserMusicScore
     * @example
     * // Get one UserMusicScore
     * const userMusicScore = await prisma.userMusicScore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserMusicScoreFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMusicScoreFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserMusicScoreClient<$Result.GetResult<Prisma.$UserMusicScorePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserMusicScores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicScoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserMusicScores
     * const userMusicScores = await prisma.userMusicScore.findMany()
     * 
     * // Get first 10 UserMusicScores
     * const userMusicScores = await prisma.userMusicScore.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userMusicScoreWithIdOnly = await prisma.userMusicScore.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserMusicScoreFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMusicScoreFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMusicScorePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserMusicScore.
     * @param {UserMusicScoreCreateArgs} args - Arguments to create a UserMusicScore.
     * @example
     * // Create one UserMusicScore
     * const UserMusicScore = await prisma.userMusicScore.create({
     *   data: {
     *     // ... data to create a UserMusicScore
     *   }
     * })
     * 
    **/
    create<T extends UserMusicScoreCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserMusicScoreCreateArgs<ExtArgs>>
    ): Prisma__UserMusicScoreClient<$Result.GetResult<Prisma.$UserMusicScorePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserMusicScores.
     * @param {UserMusicScoreCreateManyArgs} args - Arguments to create many UserMusicScores.
     * @example
     * // Create many UserMusicScores
     * const userMusicScore = await prisma.userMusicScore.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserMusicScoreCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMusicScoreCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserMusicScores and returns the data saved in the database.
     * @param {UserMusicScoreCreateManyAndReturnArgs} args - Arguments to create many UserMusicScores.
     * @example
     * // Create many UserMusicScores
     * const userMusicScore = await prisma.userMusicScore.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserMusicScores and only return the `id`
     * const userMusicScoreWithIdOnly = await prisma.userMusicScore.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserMusicScoreCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMusicScoreCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserMusicScorePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a UserMusicScore.
     * @param {UserMusicScoreDeleteArgs} args - Arguments to delete one UserMusicScore.
     * @example
     * // Delete one UserMusicScore
     * const UserMusicScore = await prisma.userMusicScore.delete({
     *   where: {
     *     // ... filter to delete one UserMusicScore
     *   }
     * })
     * 
    **/
    delete<T extends UserMusicScoreDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserMusicScoreDeleteArgs<ExtArgs>>
    ): Prisma__UserMusicScoreClient<$Result.GetResult<Prisma.$UserMusicScorePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserMusicScore.
     * @param {UserMusicScoreUpdateArgs} args - Arguments to update one UserMusicScore.
     * @example
     * // Update one UserMusicScore
     * const userMusicScore = await prisma.userMusicScore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserMusicScoreUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserMusicScoreUpdateArgs<ExtArgs>>
    ): Prisma__UserMusicScoreClient<$Result.GetResult<Prisma.$UserMusicScorePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserMusicScores.
     * @param {UserMusicScoreDeleteManyArgs} args - Arguments to filter UserMusicScores to delete.
     * @example
     * // Delete a few UserMusicScores
     * const { count } = await prisma.userMusicScore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserMusicScoreDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserMusicScoreDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMusicScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserMusicScores
     * const userMusicScore = await prisma.userMusicScore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserMusicScoreUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserMusicScoreUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserMusicScore.
     * @param {UserMusicScoreUpsertArgs} args - Arguments to update or create a UserMusicScore.
     * @example
     * // Update or create a UserMusicScore
     * const userMusicScore = await prisma.userMusicScore.upsert({
     *   create: {
     *     // ... data to create a UserMusicScore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserMusicScore we want to update
     *   }
     * })
    **/
    upsert<T extends UserMusicScoreUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserMusicScoreUpsertArgs<ExtArgs>>
    ): Prisma__UserMusicScoreClient<$Result.GetResult<Prisma.$UserMusicScorePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserMusicScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicScoreCountArgs} args - Arguments to filter UserMusicScores to count.
     * @example
     * // Count the number of UserMusicScores
     * const count = await prisma.userMusicScore.count({
     *   where: {
     *     // ... the filter for the UserMusicScores we want to count
     *   }
     * })
    **/
    count<T extends UserMusicScoreCountArgs>(
      args?: Subset<T, UserMusicScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserMusicScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserMusicScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserMusicScoreAggregateArgs>(args: Subset<T, UserMusicScoreAggregateArgs>): Prisma.PrismaPromise<GetUserMusicScoreAggregateType<T>>

    /**
     * Group by UserMusicScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMusicScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserMusicScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserMusicScoreGroupByArgs['orderBy'] }
        : { orderBy?: UserMusicScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserMusicScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserMusicScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserMusicScore model
   */
  readonly fields: UserMusicScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserMusicScore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserMusicScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    music<T extends MusicDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MusicDefaultArgs<ExtArgs>>): Prisma__MusicClient<$Result.GetResult<Prisma.$MusicPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserMusicScore model
   */ 
  interface UserMusicScoreFieldRefs {
    readonly id: FieldRef<"UserMusicScore", 'Int'>
    readonly userId: FieldRef<"UserMusicScore", 'String'>
    readonly musicId: FieldRef<"UserMusicScore", 'Int'>
    readonly accuracy: FieldRef<"UserMusicScore", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * UserMusicScore findUnique
   */
  export type UserMusicScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserMusicScore to fetch.
     */
    where: UserMusicScoreWhereUniqueInput
  }

  /**
   * UserMusicScore findUniqueOrThrow
   */
  export type UserMusicScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserMusicScore to fetch.
     */
    where: UserMusicScoreWhereUniqueInput
  }

  /**
   * UserMusicScore findFirst
   */
  export type UserMusicScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserMusicScore to fetch.
     */
    where?: UserMusicScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMusicScores to fetch.
     */
    orderBy?: UserMusicScoreOrderByWithRelationInput | UserMusicScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMusicScores.
     */
    cursor?: UserMusicScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMusicScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMusicScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMusicScores.
     */
    distinct?: UserMusicScoreScalarFieldEnum | UserMusicScoreScalarFieldEnum[]
  }

  /**
   * UserMusicScore findFirstOrThrow
   */
  export type UserMusicScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserMusicScore to fetch.
     */
    where?: UserMusicScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMusicScores to fetch.
     */
    orderBy?: UserMusicScoreOrderByWithRelationInput | UserMusicScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserMusicScores.
     */
    cursor?: UserMusicScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMusicScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMusicScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserMusicScores.
     */
    distinct?: UserMusicScoreScalarFieldEnum | UserMusicScoreScalarFieldEnum[]
  }

  /**
   * UserMusicScore findMany
   */
  export type UserMusicScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
    /**
     * Filter, which UserMusicScores to fetch.
     */
    where?: UserMusicScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserMusicScores to fetch.
     */
    orderBy?: UserMusicScoreOrderByWithRelationInput | UserMusicScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserMusicScores.
     */
    cursor?: UserMusicScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserMusicScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserMusicScores.
     */
    skip?: number
    distinct?: UserMusicScoreScalarFieldEnum | UserMusicScoreScalarFieldEnum[]
  }

  /**
   * UserMusicScore create
   */
  export type UserMusicScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a UserMusicScore.
     */
    data: XOR<UserMusicScoreCreateInput, UserMusicScoreUncheckedCreateInput>
  }

  /**
   * UserMusicScore createMany
   */
  export type UserMusicScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserMusicScores.
     */
    data: UserMusicScoreCreateManyInput | UserMusicScoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserMusicScore createManyAndReturn
   */
  export type UserMusicScoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
    /**
     * The data used to create many UserMusicScores.
     */
    data: UserMusicScoreCreateManyInput | UserMusicScoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserMusicScore update
   */
  export type UserMusicScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a UserMusicScore.
     */
    data: XOR<UserMusicScoreUpdateInput, UserMusicScoreUncheckedUpdateInput>
    /**
     * Choose, which UserMusicScore to update.
     */
    where: UserMusicScoreWhereUniqueInput
  }

  /**
   * UserMusicScore updateMany
   */
  export type UserMusicScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserMusicScores.
     */
    data: XOR<UserMusicScoreUpdateManyMutationInput, UserMusicScoreUncheckedUpdateManyInput>
    /**
     * Filter which UserMusicScores to update
     */
    where?: UserMusicScoreWhereInput
  }

  /**
   * UserMusicScore upsert
   */
  export type UserMusicScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the UserMusicScore to update in case it exists.
     */
    where: UserMusicScoreWhereUniqueInput
    /**
     * In case the UserMusicScore found by the `where` argument doesn't exist, create a new UserMusicScore with this data.
     */
    create: XOR<UserMusicScoreCreateInput, UserMusicScoreUncheckedCreateInput>
    /**
     * In case the UserMusicScore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserMusicScoreUpdateInput, UserMusicScoreUncheckedUpdateInput>
  }

  /**
   * UserMusicScore delete
   */
  export type UserMusicScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
    /**
     * Filter which UserMusicScore to delete.
     */
    where: UserMusicScoreWhereUniqueInput
  }

  /**
   * UserMusicScore deleteMany
   */
  export type UserMusicScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserMusicScores to delete
     */
    where?: UserMusicScoreWhereInput
  }

  /**
   * UserMusicScore without action
   */
  export type UserMusicScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserMusicScore
     */
    select?: UserMusicScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserMusicScoreInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MusicScalarFieldEnum: {
    id: 'id',
    title: 'title',
    composer: 'composer',
    difficultyId: 'difficultyId',
    scoreConstant: 'scoreConstant'
  };

  export type MusicScalarFieldEnum = (typeof MusicScalarFieldEnum)[keyof typeof MusicScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    loginId: 'loginId',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const DifficultyScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type DifficultyScalarFieldEnum = (typeof DifficultyScalarFieldEnum)[keyof typeof DifficultyScalarFieldEnum]


  export const UserMusicScoreScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    musicId: 'musicId',
    accuracy: 'accuracy'
  };

  export type UserMusicScoreScalarFieldEnum = (typeof UserMusicScoreScalarFieldEnum)[keyof typeof UserMusicScoreScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type MusicWhereInput = {
    AND?: MusicWhereInput | MusicWhereInput[]
    OR?: MusicWhereInput[]
    NOT?: MusicWhereInput | MusicWhereInput[]
    id?: IntFilter<"Music"> | number
    title?: StringFilter<"Music"> | string
    composer?: StringFilter<"Music"> | string
    difficultyId?: IntFilter<"Music"> | number
    scoreConstant?: FloatFilter<"Music"> | number
    userScores?: UserMusicScoreListRelationFilter
    difficulty?: XOR<DifficultyRelationFilter, DifficultyWhereInput>
  }

  export type MusicOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    composer?: SortOrder
    difficultyId?: SortOrder
    scoreConstant?: SortOrder
    userScores?: UserMusicScoreOrderByRelationAggregateInput
    difficulty?: DifficultyOrderByWithRelationInput
  }

  export type MusicWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MusicWhereInput | MusicWhereInput[]
    OR?: MusicWhereInput[]
    NOT?: MusicWhereInput | MusicWhereInput[]
    title?: StringFilter<"Music"> | string
    composer?: StringFilter<"Music"> | string
    difficultyId?: IntFilter<"Music"> | number
    scoreConstant?: FloatFilter<"Music"> | number
    userScores?: UserMusicScoreListRelationFilter
    difficulty?: XOR<DifficultyRelationFilter, DifficultyWhereInput>
  }, "id">

  export type MusicOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    composer?: SortOrder
    difficultyId?: SortOrder
    scoreConstant?: SortOrder
    _count?: MusicCountOrderByAggregateInput
    _avg?: MusicAvgOrderByAggregateInput
    _max?: MusicMaxOrderByAggregateInput
    _min?: MusicMinOrderByAggregateInput
    _sum?: MusicSumOrderByAggregateInput
  }

  export type MusicScalarWhereWithAggregatesInput = {
    AND?: MusicScalarWhereWithAggregatesInput | MusicScalarWhereWithAggregatesInput[]
    OR?: MusicScalarWhereWithAggregatesInput[]
    NOT?: MusicScalarWhereWithAggregatesInput | MusicScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Music"> | number
    title?: StringWithAggregatesFilter<"Music"> | string
    composer?: StringWithAggregatesFilter<"Music"> | string
    difficultyId?: IntWithAggregatesFilter<"Music"> | number
    scoreConstant?: FloatWithAggregatesFilter<"Music"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    loginId?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    scores?: UserMusicScoreListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    loginId?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    scores?: UserMusicScoreOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    loginId?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    scores?: UserMusicScoreListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    loginId?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    loginId?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type DifficultyWhereInput = {
    AND?: DifficultyWhereInput | DifficultyWhereInput[]
    OR?: DifficultyWhereInput[]
    NOT?: DifficultyWhereInput | DifficultyWhereInput[]
    id?: IntFilter<"Difficulty"> | number
    name?: StringFilter<"Difficulty"> | string
    musics?: MusicListRelationFilter
  }

  export type DifficultyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    musics?: MusicOrderByRelationAggregateInput
  }

  export type DifficultyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DifficultyWhereInput | DifficultyWhereInput[]
    OR?: DifficultyWhereInput[]
    NOT?: DifficultyWhereInput | DifficultyWhereInput[]
    name?: StringFilter<"Difficulty"> | string
    musics?: MusicListRelationFilter
  }, "id">

  export type DifficultyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: DifficultyCountOrderByAggregateInput
    _avg?: DifficultyAvgOrderByAggregateInput
    _max?: DifficultyMaxOrderByAggregateInput
    _min?: DifficultyMinOrderByAggregateInput
    _sum?: DifficultySumOrderByAggregateInput
  }

  export type DifficultyScalarWhereWithAggregatesInput = {
    AND?: DifficultyScalarWhereWithAggregatesInput | DifficultyScalarWhereWithAggregatesInput[]
    OR?: DifficultyScalarWhereWithAggregatesInput[]
    NOT?: DifficultyScalarWhereWithAggregatesInput | DifficultyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Difficulty"> | number
    name?: StringWithAggregatesFilter<"Difficulty"> | string
  }

  export type UserMusicScoreWhereInput = {
    AND?: UserMusicScoreWhereInput | UserMusicScoreWhereInput[]
    OR?: UserMusicScoreWhereInput[]
    NOT?: UserMusicScoreWhereInput | UserMusicScoreWhereInput[]
    id?: IntFilter<"UserMusicScore"> | number
    userId?: StringFilter<"UserMusicScore"> | string
    musicId?: IntFilter<"UserMusicScore"> | number
    accuracy?: FloatFilter<"UserMusicScore"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    music?: XOR<MusicRelationFilter, MusicWhereInput>
  }

  export type UserMusicScoreOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    musicId?: SortOrder
    accuracy?: SortOrder
    user?: UserOrderByWithRelationInput
    music?: MusicOrderByWithRelationInput
  }

  export type UserMusicScoreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_musicId?: UserMusicScoreUserIdMusicIdCompoundUniqueInput
    AND?: UserMusicScoreWhereInput | UserMusicScoreWhereInput[]
    OR?: UserMusicScoreWhereInput[]
    NOT?: UserMusicScoreWhereInput | UserMusicScoreWhereInput[]
    userId?: StringFilter<"UserMusicScore"> | string
    musicId?: IntFilter<"UserMusicScore"> | number
    accuracy?: FloatFilter<"UserMusicScore"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    music?: XOR<MusicRelationFilter, MusicWhereInput>
  }, "id" | "userId_musicId">

  export type UserMusicScoreOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    musicId?: SortOrder
    accuracy?: SortOrder
    _count?: UserMusicScoreCountOrderByAggregateInput
    _avg?: UserMusicScoreAvgOrderByAggregateInput
    _max?: UserMusicScoreMaxOrderByAggregateInput
    _min?: UserMusicScoreMinOrderByAggregateInput
    _sum?: UserMusicScoreSumOrderByAggregateInput
  }

  export type UserMusicScoreScalarWhereWithAggregatesInput = {
    AND?: UserMusicScoreScalarWhereWithAggregatesInput | UserMusicScoreScalarWhereWithAggregatesInput[]
    OR?: UserMusicScoreScalarWhereWithAggregatesInput[]
    NOT?: UserMusicScoreScalarWhereWithAggregatesInput | UserMusicScoreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserMusicScore"> | number
    userId?: StringWithAggregatesFilter<"UserMusicScore"> | string
    musicId?: IntWithAggregatesFilter<"UserMusicScore"> | number
    accuracy?: FloatWithAggregatesFilter<"UserMusicScore"> | number
  }

  export type MusicCreateInput = {
    title: string
    composer: string
    scoreConstant: number
    userScores?: UserMusicScoreCreateNestedManyWithoutMusicInput
    difficulty: DifficultyCreateNestedOneWithoutMusicsInput
  }

  export type MusicUncheckedCreateInput = {
    id?: number
    title: string
    composer: string
    difficultyId: number
    scoreConstant: number
    userScores?: UserMusicScoreUncheckedCreateNestedManyWithoutMusicInput
  }

  export type MusicUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    composer?: StringFieldUpdateOperationsInput | string
    scoreConstant?: FloatFieldUpdateOperationsInput | number
    userScores?: UserMusicScoreUpdateManyWithoutMusicNestedInput
    difficulty?: DifficultyUpdateOneRequiredWithoutMusicsNestedInput
  }

  export type MusicUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    composer?: StringFieldUpdateOperationsInput | string
    difficultyId?: IntFieldUpdateOperationsInput | number
    scoreConstant?: FloatFieldUpdateOperationsInput | number
    userScores?: UserMusicScoreUncheckedUpdateManyWithoutMusicNestedInput
  }

  export type MusicCreateManyInput = {
    id?: number
    title: string
    composer: string
    difficultyId: number
    scoreConstant: number
  }

  export type MusicUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    composer?: StringFieldUpdateOperationsInput | string
    scoreConstant?: FloatFieldUpdateOperationsInput | number
  }

  export type MusicUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    composer?: StringFieldUpdateOperationsInput | string
    difficultyId?: IntFieldUpdateOperationsInput | number
    scoreConstant?: FloatFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    id?: string
    loginId: string
    password: string
    createdAt?: Date | string
    scores?: UserMusicScoreCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    loginId: string
    password: string
    createdAt?: Date | string
    scores?: UserMusicScoreUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    loginId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: UserMusicScoreUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    loginId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scores?: UserMusicScoreUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    loginId: string
    password: string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    loginId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    loginId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DifficultyCreateInput = {
    name: string
    musics?: MusicCreateNestedManyWithoutDifficultyInput
  }

  export type DifficultyUncheckedCreateInput = {
    id?: number
    name: string
    musics?: MusicUncheckedCreateNestedManyWithoutDifficultyInput
  }

  export type DifficultyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    musics?: MusicUpdateManyWithoutDifficultyNestedInput
  }

  export type DifficultyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    musics?: MusicUncheckedUpdateManyWithoutDifficultyNestedInput
  }

  export type DifficultyCreateManyInput = {
    id?: number
    name: string
  }

  export type DifficultyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DifficultyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserMusicScoreCreateInput = {
    accuracy: number
    user: UserCreateNestedOneWithoutScoresInput
    music: MusicCreateNestedOneWithoutUserScoresInput
  }

  export type UserMusicScoreUncheckedCreateInput = {
    id?: number
    userId: string
    musicId: number
    accuracy: number
  }

  export type UserMusicScoreUpdateInput = {
    accuracy?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutScoresNestedInput
    music?: MusicUpdateOneRequiredWithoutUserScoresNestedInput
  }

  export type UserMusicScoreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    musicId?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
  }

  export type UserMusicScoreCreateManyInput = {
    id?: number
    userId: string
    musicId: number
    accuracy: number
  }

  export type UserMusicScoreUpdateManyMutationInput = {
    accuracy?: FloatFieldUpdateOperationsInput | number
  }

  export type UserMusicScoreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    musicId?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserMusicScoreListRelationFilter = {
    every?: UserMusicScoreWhereInput
    some?: UserMusicScoreWhereInput
    none?: UserMusicScoreWhereInput
  }

  export type DifficultyRelationFilter = {
    is?: DifficultyWhereInput
    isNot?: DifficultyWhereInput
  }

  export type UserMusicScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MusicCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    composer?: SortOrder
    difficultyId?: SortOrder
    scoreConstant?: SortOrder
  }

  export type MusicAvgOrderByAggregateInput = {
    id?: SortOrder
    difficultyId?: SortOrder
    scoreConstant?: SortOrder
  }

  export type MusicMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    composer?: SortOrder
    difficultyId?: SortOrder
    scoreConstant?: SortOrder
  }

  export type MusicMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    composer?: SortOrder
    difficultyId?: SortOrder
    scoreConstant?: SortOrder
  }

  export type MusicSumOrderByAggregateInput = {
    id?: SortOrder
    difficultyId?: SortOrder
    scoreConstant?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    loginId?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    loginId?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    loginId?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type MusicListRelationFilter = {
    every?: MusicWhereInput
    some?: MusicWhereInput
    none?: MusicWhereInput
  }

  export type MusicOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DifficultyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DifficultyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DifficultyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DifficultyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type DifficultySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type MusicRelationFilter = {
    is?: MusicWhereInput
    isNot?: MusicWhereInput
  }

  export type UserMusicScoreUserIdMusicIdCompoundUniqueInput = {
    userId: string
    musicId: number
  }

  export type UserMusicScoreCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    musicId?: SortOrder
    accuracy?: SortOrder
  }

  export type UserMusicScoreAvgOrderByAggregateInput = {
    id?: SortOrder
    musicId?: SortOrder
    accuracy?: SortOrder
  }

  export type UserMusicScoreMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    musicId?: SortOrder
    accuracy?: SortOrder
  }

  export type UserMusicScoreMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    musicId?: SortOrder
    accuracy?: SortOrder
  }

  export type UserMusicScoreSumOrderByAggregateInput = {
    id?: SortOrder
    musicId?: SortOrder
    accuracy?: SortOrder
  }

  export type UserMusicScoreCreateNestedManyWithoutMusicInput = {
    create?: XOR<UserMusicScoreCreateWithoutMusicInput, UserMusicScoreUncheckedCreateWithoutMusicInput> | UserMusicScoreCreateWithoutMusicInput[] | UserMusicScoreUncheckedCreateWithoutMusicInput[]
    connectOrCreate?: UserMusicScoreCreateOrConnectWithoutMusicInput | UserMusicScoreCreateOrConnectWithoutMusicInput[]
    createMany?: UserMusicScoreCreateManyMusicInputEnvelope
    connect?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
  }

  export type DifficultyCreateNestedOneWithoutMusicsInput = {
    create?: XOR<DifficultyCreateWithoutMusicsInput, DifficultyUncheckedCreateWithoutMusicsInput>
    connectOrCreate?: DifficultyCreateOrConnectWithoutMusicsInput
    connect?: DifficultyWhereUniqueInput
  }

  export type UserMusicScoreUncheckedCreateNestedManyWithoutMusicInput = {
    create?: XOR<UserMusicScoreCreateWithoutMusicInput, UserMusicScoreUncheckedCreateWithoutMusicInput> | UserMusicScoreCreateWithoutMusicInput[] | UserMusicScoreUncheckedCreateWithoutMusicInput[]
    connectOrCreate?: UserMusicScoreCreateOrConnectWithoutMusicInput | UserMusicScoreCreateOrConnectWithoutMusicInput[]
    createMany?: UserMusicScoreCreateManyMusicInputEnvelope
    connect?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserMusicScoreUpdateManyWithoutMusicNestedInput = {
    create?: XOR<UserMusicScoreCreateWithoutMusicInput, UserMusicScoreUncheckedCreateWithoutMusicInput> | UserMusicScoreCreateWithoutMusicInput[] | UserMusicScoreUncheckedCreateWithoutMusicInput[]
    connectOrCreate?: UserMusicScoreCreateOrConnectWithoutMusicInput | UserMusicScoreCreateOrConnectWithoutMusicInput[]
    upsert?: UserMusicScoreUpsertWithWhereUniqueWithoutMusicInput | UserMusicScoreUpsertWithWhereUniqueWithoutMusicInput[]
    createMany?: UserMusicScoreCreateManyMusicInputEnvelope
    set?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    disconnect?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    delete?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    connect?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    update?: UserMusicScoreUpdateWithWhereUniqueWithoutMusicInput | UserMusicScoreUpdateWithWhereUniqueWithoutMusicInput[]
    updateMany?: UserMusicScoreUpdateManyWithWhereWithoutMusicInput | UserMusicScoreUpdateManyWithWhereWithoutMusicInput[]
    deleteMany?: UserMusicScoreScalarWhereInput | UserMusicScoreScalarWhereInput[]
  }

  export type DifficultyUpdateOneRequiredWithoutMusicsNestedInput = {
    create?: XOR<DifficultyCreateWithoutMusicsInput, DifficultyUncheckedCreateWithoutMusicsInput>
    connectOrCreate?: DifficultyCreateOrConnectWithoutMusicsInput
    upsert?: DifficultyUpsertWithoutMusicsInput
    connect?: DifficultyWhereUniqueInput
    update?: XOR<XOR<DifficultyUpdateToOneWithWhereWithoutMusicsInput, DifficultyUpdateWithoutMusicsInput>, DifficultyUncheckedUpdateWithoutMusicsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserMusicScoreUncheckedUpdateManyWithoutMusicNestedInput = {
    create?: XOR<UserMusicScoreCreateWithoutMusicInput, UserMusicScoreUncheckedCreateWithoutMusicInput> | UserMusicScoreCreateWithoutMusicInput[] | UserMusicScoreUncheckedCreateWithoutMusicInput[]
    connectOrCreate?: UserMusicScoreCreateOrConnectWithoutMusicInput | UserMusicScoreCreateOrConnectWithoutMusicInput[]
    upsert?: UserMusicScoreUpsertWithWhereUniqueWithoutMusicInput | UserMusicScoreUpsertWithWhereUniqueWithoutMusicInput[]
    createMany?: UserMusicScoreCreateManyMusicInputEnvelope
    set?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    disconnect?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    delete?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    connect?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    update?: UserMusicScoreUpdateWithWhereUniqueWithoutMusicInput | UserMusicScoreUpdateWithWhereUniqueWithoutMusicInput[]
    updateMany?: UserMusicScoreUpdateManyWithWhereWithoutMusicInput | UserMusicScoreUpdateManyWithWhereWithoutMusicInput[]
    deleteMany?: UserMusicScoreScalarWhereInput | UserMusicScoreScalarWhereInput[]
  }

  export type UserMusicScoreCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMusicScoreCreateWithoutUserInput, UserMusicScoreUncheckedCreateWithoutUserInput> | UserMusicScoreCreateWithoutUserInput[] | UserMusicScoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMusicScoreCreateOrConnectWithoutUserInput | UserMusicScoreCreateOrConnectWithoutUserInput[]
    createMany?: UserMusicScoreCreateManyUserInputEnvelope
    connect?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
  }

  export type UserMusicScoreUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserMusicScoreCreateWithoutUserInput, UserMusicScoreUncheckedCreateWithoutUserInput> | UserMusicScoreCreateWithoutUserInput[] | UserMusicScoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMusicScoreCreateOrConnectWithoutUserInput | UserMusicScoreCreateOrConnectWithoutUserInput[]
    createMany?: UserMusicScoreCreateManyUserInputEnvelope
    connect?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserMusicScoreUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMusicScoreCreateWithoutUserInput, UserMusicScoreUncheckedCreateWithoutUserInput> | UserMusicScoreCreateWithoutUserInput[] | UserMusicScoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMusicScoreCreateOrConnectWithoutUserInput | UserMusicScoreCreateOrConnectWithoutUserInput[]
    upsert?: UserMusicScoreUpsertWithWhereUniqueWithoutUserInput | UserMusicScoreUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMusicScoreCreateManyUserInputEnvelope
    set?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    disconnect?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    delete?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    connect?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    update?: UserMusicScoreUpdateWithWhereUniqueWithoutUserInput | UserMusicScoreUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMusicScoreUpdateManyWithWhereWithoutUserInput | UserMusicScoreUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMusicScoreScalarWhereInput | UserMusicScoreScalarWhereInput[]
  }

  export type UserMusicScoreUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserMusicScoreCreateWithoutUserInput, UserMusicScoreUncheckedCreateWithoutUserInput> | UserMusicScoreCreateWithoutUserInput[] | UserMusicScoreUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserMusicScoreCreateOrConnectWithoutUserInput | UserMusicScoreCreateOrConnectWithoutUserInput[]
    upsert?: UserMusicScoreUpsertWithWhereUniqueWithoutUserInput | UserMusicScoreUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserMusicScoreCreateManyUserInputEnvelope
    set?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    disconnect?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    delete?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    connect?: UserMusicScoreWhereUniqueInput | UserMusicScoreWhereUniqueInput[]
    update?: UserMusicScoreUpdateWithWhereUniqueWithoutUserInput | UserMusicScoreUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserMusicScoreUpdateManyWithWhereWithoutUserInput | UserMusicScoreUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserMusicScoreScalarWhereInput | UserMusicScoreScalarWhereInput[]
  }

  export type MusicCreateNestedManyWithoutDifficultyInput = {
    create?: XOR<MusicCreateWithoutDifficultyInput, MusicUncheckedCreateWithoutDifficultyInput> | MusicCreateWithoutDifficultyInput[] | MusicUncheckedCreateWithoutDifficultyInput[]
    connectOrCreate?: MusicCreateOrConnectWithoutDifficultyInput | MusicCreateOrConnectWithoutDifficultyInput[]
    createMany?: MusicCreateManyDifficultyInputEnvelope
    connect?: MusicWhereUniqueInput | MusicWhereUniqueInput[]
  }

  export type MusicUncheckedCreateNestedManyWithoutDifficultyInput = {
    create?: XOR<MusicCreateWithoutDifficultyInput, MusicUncheckedCreateWithoutDifficultyInput> | MusicCreateWithoutDifficultyInput[] | MusicUncheckedCreateWithoutDifficultyInput[]
    connectOrCreate?: MusicCreateOrConnectWithoutDifficultyInput | MusicCreateOrConnectWithoutDifficultyInput[]
    createMany?: MusicCreateManyDifficultyInputEnvelope
    connect?: MusicWhereUniqueInput | MusicWhereUniqueInput[]
  }

  export type MusicUpdateManyWithoutDifficultyNestedInput = {
    create?: XOR<MusicCreateWithoutDifficultyInput, MusicUncheckedCreateWithoutDifficultyInput> | MusicCreateWithoutDifficultyInput[] | MusicUncheckedCreateWithoutDifficultyInput[]
    connectOrCreate?: MusicCreateOrConnectWithoutDifficultyInput | MusicCreateOrConnectWithoutDifficultyInput[]
    upsert?: MusicUpsertWithWhereUniqueWithoutDifficultyInput | MusicUpsertWithWhereUniqueWithoutDifficultyInput[]
    createMany?: MusicCreateManyDifficultyInputEnvelope
    set?: MusicWhereUniqueInput | MusicWhereUniqueInput[]
    disconnect?: MusicWhereUniqueInput | MusicWhereUniqueInput[]
    delete?: MusicWhereUniqueInput | MusicWhereUniqueInput[]
    connect?: MusicWhereUniqueInput | MusicWhereUniqueInput[]
    update?: MusicUpdateWithWhereUniqueWithoutDifficultyInput | MusicUpdateWithWhereUniqueWithoutDifficultyInput[]
    updateMany?: MusicUpdateManyWithWhereWithoutDifficultyInput | MusicUpdateManyWithWhereWithoutDifficultyInput[]
    deleteMany?: MusicScalarWhereInput | MusicScalarWhereInput[]
  }

  export type MusicUncheckedUpdateManyWithoutDifficultyNestedInput = {
    create?: XOR<MusicCreateWithoutDifficultyInput, MusicUncheckedCreateWithoutDifficultyInput> | MusicCreateWithoutDifficultyInput[] | MusicUncheckedCreateWithoutDifficultyInput[]
    connectOrCreate?: MusicCreateOrConnectWithoutDifficultyInput | MusicCreateOrConnectWithoutDifficultyInput[]
    upsert?: MusicUpsertWithWhereUniqueWithoutDifficultyInput | MusicUpsertWithWhereUniqueWithoutDifficultyInput[]
    createMany?: MusicCreateManyDifficultyInputEnvelope
    set?: MusicWhereUniqueInput | MusicWhereUniqueInput[]
    disconnect?: MusicWhereUniqueInput | MusicWhereUniqueInput[]
    delete?: MusicWhereUniqueInput | MusicWhereUniqueInput[]
    connect?: MusicWhereUniqueInput | MusicWhereUniqueInput[]
    update?: MusicUpdateWithWhereUniqueWithoutDifficultyInput | MusicUpdateWithWhereUniqueWithoutDifficultyInput[]
    updateMany?: MusicUpdateManyWithWhereWithoutDifficultyInput | MusicUpdateManyWithWhereWithoutDifficultyInput[]
    deleteMany?: MusicScalarWhereInput | MusicScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutScoresInput = {
    create?: XOR<UserCreateWithoutScoresInput, UserUncheckedCreateWithoutScoresInput>
    connectOrCreate?: UserCreateOrConnectWithoutScoresInput
    connect?: UserWhereUniqueInput
  }

  export type MusicCreateNestedOneWithoutUserScoresInput = {
    create?: XOR<MusicCreateWithoutUserScoresInput, MusicUncheckedCreateWithoutUserScoresInput>
    connectOrCreate?: MusicCreateOrConnectWithoutUserScoresInput
    connect?: MusicWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutScoresNestedInput = {
    create?: XOR<UserCreateWithoutScoresInput, UserUncheckedCreateWithoutScoresInput>
    connectOrCreate?: UserCreateOrConnectWithoutScoresInput
    upsert?: UserUpsertWithoutScoresInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScoresInput, UserUpdateWithoutScoresInput>, UserUncheckedUpdateWithoutScoresInput>
  }

  export type MusicUpdateOneRequiredWithoutUserScoresNestedInput = {
    create?: XOR<MusicCreateWithoutUserScoresInput, MusicUncheckedCreateWithoutUserScoresInput>
    connectOrCreate?: MusicCreateOrConnectWithoutUserScoresInput
    upsert?: MusicUpsertWithoutUserScoresInput
    connect?: MusicWhereUniqueInput
    update?: XOR<XOR<MusicUpdateToOneWithWhereWithoutUserScoresInput, MusicUpdateWithoutUserScoresInput>, MusicUncheckedUpdateWithoutUserScoresInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserMusicScoreCreateWithoutMusicInput = {
    accuracy: number
    user: UserCreateNestedOneWithoutScoresInput
  }

  export type UserMusicScoreUncheckedCreateWithoutMusicInput = {
    id?: number
    userId: string
    accuracy: number
  }

  export type UserMusicScoreCreateOrConnectWithoutMusicInput = {
    where: UserMusicScoreWhereUniqueInput
    create: XOR<UserMusicScoreCreateWithoutMusicInput, UserMusicScoreUncheckedCreateWithoutMusicInput>
  }

  export type UserMusicScoreCreateManyMusicInputEnvelope = {
    data: UserMusicScoreCreateManyMusicInput | UserMusicScoreCreateManyMusicInput[]
    skipDuplicates?: boolean
  }

  export type DifficultyCreateWithoutMusicsInput = {
    name: string
  }

  export type DifficultyUncheckedCreateWithoutMusicsInput = {
    id?: number
    name: string
  }

  export type DifficultyCreateOrConnectWithoutMusicsInput = {
    where: DifficultyWhereUniqueInput
    create: XOR<DifficultyCreateWithoutMusicsInput, DifficultyUncheckedCreateWithoutMusicsInput>
  }

  export type UserMusicScoreUpsertWithWhereUniqueWithoutMusicInput = {
    where: UserMusicScoreWhereUniqueInput
    update: XOR<UserMusicScoreUpdateWithoutMusicInput, UserMusicScoreUncheckedUpdateWithoutMusicInput>
    create: XOR<UserMusicScoreCreateWithoutMusicInput, UserMusicScoreUncheckedCreateWithoutMusicInput>
  }

  export type UserMusicScoreUpdateWithWhereUniqueWithoutMusicInput = {
    where: UserMusicScoreWhereUniqueInput
    data: XOR<UserMusicScoreUpdateWithoutMusicInput, UserMusicScoreUncheckedUpdateWithoutMusicInput>
  }

  export type UserMusicScoreUpdateManyWithWhereWithoutMusicInput = {
    where: UserMusicScoreScalarWhereInput
    data: XOR<UserMusicScoreUpdateManyMutationInput, UserMusicScoreUncheckedUpdateManyWithoutMusicInput>
  }

  export type UserMusicScoreScalarWhereInput = {
    AND?: UserMusicScoreScalarWhereInput | UserMusicScoreScalarWhereInput[]
    OR?: UserMusicScoreScalarWhereInput[]
    NOT?: UserMusicScoreScalarWhereInput | UserMusicScoreScalarWhereInput[]
    id?: IntFilter<"UserMusicScore"> | number
    userId?: StringFilter<"UserMusicScore"> | string
    musicId?: IntFilter<"UserMusicScore"> | number
    accuracy?: FloatFilter<"UserMusicScore"> | number
  }

  export type DifficultyUpsertWithoutMusicsInput = {
    update: XOR<DifficultyUpdateWithoutMusicsInput, DifficultyUncheckedUpdateWithoutMusicsInput>
    create: XOR<DifficultyCreateWithoutMusicsInput, DifficultyUncheckedCreateWithoutMusicsInput>
    where?: DifficultyWhereInput
  }

  export type DifficultyUpdateToOneWithWhereWithoutMusicsInput = {
    where?: DifficultyWhereInput
    data: XOR<DifficultyUpdateWithoutMusicsInput, DifficultyUncheckedUpdateWithoutMusicsInput>
  }

  export type DifficultyUpdateWithoutMusicsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DifficultyUncheckedUpdateWithoutMusicsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserMusicScoreCreateWithoutUserInput = {
    accuracy: number
    music: MusicCreateNestedOneWithoutUserScoresInput
  }

  export type UserMusicScoreUncheckedCreateWithoutUserInput = {
    id?: number
    musicId: number
    accuracy: number
  }

  export type UserMusicScoreCreateOrConnectWithoutUserInput = {
    where: UserMusicScoreWhereUniqueInput
    create: XOR<UserMusicScoreCreateWithoutUserInput, UserMusicScoreUncheckedCreateWithoutUserInput>
  }

  export type UserMusicScoreCreateManyUserInputEnvelope = {
    data: UserMusicScoreCreateManyUserInput | UserMusicScoreCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserMusicScoreUpsertWithWhereUniqueWithoutUserInput = {
    where: UserMusicScoreWhereUniqueInput
    update: XOR<UserMusicScoreUpdateWithoutUserInput, UserMusicScoreUncheckedUpdateWithoutUserInput>
    create: XOR<UserMusicScoreCreateWithoutUserInput, UserMusicScoreUncheckedCreateWithoutUserInput>
  }

  export type UserMusicScoreUpdateWithWhereUniqueWithoutUserInput = {
    where: UserMusicScoreWhereUniqueInput
    data: XOR<UserMusicScoreUpdateWithoutUserInput, UserMusicScoreUncheckedUpdateWithoutUserInput>
  }

  export type UserMusicScoreUpdateManyWithWhereWithoutUserInput = {
    where: UserMusicScoreScalarWhereInput
    data: XOR<UserMusicScoreUpdateManyMutationInput, UserMusicScoreUncheckedUpdateManyWithoutUserInput>
  }

  export type MusicCreateWithoutDifficultyInput = {
    title: string
    composer: string
    scoreConstant: number
    userScores?: UserMusicScoreCreateNestedManyWithoutMusicInput
  }

  export type MusicUncheckedCreateWithoutDifficultyInput = {
    id?: number
    title: string
    composer: string
    scoreConstant: number
    userScores?: UserMusicScoreUncheckedCreateNestedManyWithoutMusicInput
  }

  export type MusicCreateOrConnectWithoutDifficultyInput = {
    where: MusicWhereUniqueInput
    create: XOR<MusicCreateWithoutDifficultyInput, MusicUncheckedCreateWithoutDifficultyInput>
  }

  export type MusicCreateManyDifficultyInputEnvelope = {
    data: MusicCreateManyDifficultyInput | MusicCreateManyDifficultyInput[]
    skipDuplicates?: boolean
  }

  export type MusicUpsertWithWhereUniqueWithoutDifficultyInput = {
    where: MusicWhereUniqueInput
    update: XOR<MusicUpdateWithoutDifficultyInput, MusicUncheckedUpdateWithoutDifficultyInput>
    create: XOR<MusicCreateWithoutDifficultyInput, MusicUncheckedCreateWithoutDifficultyInput>
  }

  export type MusicUpdateWithWhereUniqueWithoutDifficultyInput = {
    where: MusicWhereUniqueInput
    data: XOR<MusicUpdateWithoutDifficultyInput, MusicUncheckedUpdateWithoutDifficultyInput>
  }

  export type MusicUpdateManyWithWhereWithoutDifficultyInput = {
    where: MusicScalarWhereInput
    data: XOR<MusicUpdateManyMutationInput, MusicUncheckedUpdateManyWithoutDifficultyInput>
  }

  export type MusicScalarWhereInput = {
    AND?: MusicScalarWhereInput | MusicScalarWhereInput[]
    OR?: MusicScalarWhereInput[]
    NOT?: MusicScalarWhereInput | MusicScalarWhereInput[]
    id?: IntFilter<"Music"> | number
    title?: StringFilter<"Music"> | string
    composer?: StringFilter<"Music"> | string
    difficultyId?: IntFilter<"Music"> | number
    scoreConstant?: FloatFilter<"Music"> | number
  }

  export type UserCreateWithoutScoresInput = {
    id?: string
    loginId: string
    password: string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateWithoutScoresInput = {
    id?: string
    loginId: string
    password: string
    createdAt?: Date | string
  }

  export type UserCreateOrConnectWithoutScoresInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScoresInput, UserUncheckedCreateWithoutScoresInput>
  }

  export type MusicCreateWithoutUserScoresInput = {
    title: string
    composer: string
    scoreConstant: number
    difficulty: DifficultyCreateNestedOneWithoutMusicsInput
  }

  export type MusicUncheckedCreateWithoutUserScoresInput = {
    id?: number
    title: string
    composer: string
    difficultyId: number
    scoreConstant: number
  }

  export type MusicCreateOrConnectWithoutUserScoresInput = {
    where: MusicWhereUniqueInput
    create: XOR<MusicCreateWithoutUserScoresInput, MusicUncheckedCreateWithoutUserScoresInput>
  }

  export type UserUpsertWithoutScoresInput = {
    update: XOR<UserUpdateWithoutScoresInput, UserUncheckedUpdateWithoutScoresInput>
    create: XOR<UserCreateWithoutScoresInput, UserUncheckedCreateWithoutScoresInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScoresInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScoresInput, UserUncheckedUpdateWithoutScoresInput>
  }

  export type UserUpdateWithoutScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    loginId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    loginId?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MusicUpsertWithoutUserScoresInput = {
    update: XOR<MusicUpdateWithoutUserScoresInput, MusicUncheckedUpdateWithoutUserScoresInput>
    create: XOR<MusicCreateWithoutUserScoresInput, MusicUncheckedCreateWithoutUserScoresInput>
    where?: MusicWhereInput
  }

  export type MusicUpdateToOneWithWhereWithoutUserScoresInput = {
    where?: MusicWhereInput
    data: XOR<MusicUpdateWithoutUserScoresInput, MusicUncheckedUpdateWithoutUserScoresInput>
  }

  export type MusicUpdateWithoutUserScoresInput = {
    title?: StringFieldUpdateOperationsInput | string
    composer?: StringFieldUpdateOperationsInput | string
    scoreConstant?: FloatFieldUpdateOperationsInput | number
    difficulty?: DifficultyUpdateOneRequiredWithoutMusicsNestedInput
  }

  export type MusicUncheckedUpdateWithoutUserScoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    composer?: StringFieldUpdateOperationsInput | string
    difficultyId?: IntFieldUpdateOperationsInput | number
    scoreConstant?: FloatFieldUpdateOperationsInput | number
  }

  export type UserMusicScoreCreateManyMusicInput = {
    id?: number
    userId: string
    accuracy: number
  }

  export type UserMusicScoreUpdateWithoutMusicInput = {
    accuracy?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutScoresNestedInput
  }

  export type UserMusicScoreUncheckedUpdateWithoutMusicInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    accuracy?: FloatFieldUpdateOperationsInput | number
  }

  export type UserMusicScoreUncheckedUpdateManyWithoutMusicInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    accuracy?: FloatFieldUpdateOperationsInput | number
  }

  export type UserMusicScoreCreateManyUserInput = {
    id?: number
    musicId: number
    accuracy: number
  }

  export type UserMusicScoreUpdateWithoutUserInput = {
    accuracy?: FloatFieldUpdateOperationsInput | number
    music?: MusicUpdateOneRequiredWithoutUserScoresNestedInput
  }

  export type UserMusicScoreUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    musicId?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
  }

  export type UserMusicScoreUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    musicId?: IntFieldUpdateOperationsInput | number
    accuracy?: FloatFieldUpdateOperationsInput | number
  }

  export type MusicCreateManyDifficultyInput = {
    id?: number
    title: string
    composer: string
    scoreConstant: number
  }

  export type MusicUpdateWithoutDifficultyInput = {
    title?: StringFieldUpdateOperationsInput | string
    composer?: StringFieldUpdateOperationsInput | string
    scoreConstant?: FloatFieldUpdateOperationsInput | number
    userScores?: UserMusicScoreUpdateManyWithoutMusicNestedInput
  }

  export type MusicUncheckedUpdateWithoutDifficultyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    composer?: StringFieldUpdateOperationsInput | string
    scoreConstant?: FloatFieldUpdateOperationsInput | number
    userScores?: UserMusicScoreUncheckedUpdateManyWithoutMusicNestedInput
  }

  export type MusicUncheckedUpdateManyWithoutDifficultyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    composer?: StringFieldUpdateOperationsInput | string
    scoreConstant?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use MusicCountOutputTypeDefaultArgs instead
     */
    export type MusicCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MusicCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DifficultyCountOutputTypeDefaultArgs instead
     */
    export type DifficultyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DifficultyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MusicDefaultArgs instead
     */
    export type MusicArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MusicDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DifficultyDefaultArgs instead
     */
    export type DifficultyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DifficultyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserMusicScoreDefaultArgs instead
     */
    export type UserMusicScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserMusicScoreDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}